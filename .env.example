# Environment Configuration for Rust Micro Front-End Application
# Copy this file to .env and customize for your environment

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Database adapter selection: mock (for development) or mysql (for production)
# mock: Uses in-memory data store for fast development iteration
# mysql: Uses MySQL database for persistent storage
# Validation: Must be either "mock" or "mysql"
DATABASE_ADAPTER=mock

# MySQL connection settings (only used when DATABASE_ADAPTER=mysql)
DATABASE_HOST=localhost
DATABASE_NAME=micro_frontend
# Validation: Must be a valid port number (1-65535)
DATABASE_PORT=3306
DATABASE_USERNAME=app_user
DATABASE_PASSWORD=secure_password

# Database connection pool settings
# Validation: Must be a positive integer (1-100)
DATABASE_MAX_CONNECTIONS=10
DATABASE_MIN_CONNECTIONS=1
# Validation: Must be a positive integer (1-300 seconds)
DATABASE_CONNECT_TIMEOUT=30
DATABASE_IDLE_TIMEOUT=600

# =============================================================================
# MYSQL CONTAINER CONFIGURATION
# =============================================================================

# MySQL root password for database administration
MYSQL_ROOT_PASSWORD=root_password

# MySQL database name to create
MYSQL_DATABASE=micro_frontend

# MySQL application user credentials
MYSQL_USER=app_user
MYSQL_PASSWORD=secure_password

# =============================================================================
# AUTHENTICATION CONFIGURATION
# =============================================================================

# JWT public key for token validation (PEM format)
# This is used to validate JWT tokens issued by your authentication service
# Replace with your actual public key in production
# Validation: Must be a valid PEM-encoded public key
JWT_PUBLIC_KEY="-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...\n-----END PUBLIC KEY-----"

# JWT private key for test token generation (DEVELOPMENT/TESTING ONLY)
# This is used by test scripts to generate JWT tokens for testing
# WARNING: This should NEVER be used in production - the application only validates tokens
# Keep this key secure and never commit real private keys to version control
# Validation: Must be a valid PEM-encoded private key (testing only)
JWT_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC...\n-----END PRIVATE KEY-----"

# JWT security configuration
# Validation: Must be RS256 or ES256
JWT_ALGORITHM=RS256
JWT_AUDIENCE=micro-frontend-service
JWT_ISSUER=your-auth-service
# Validation: Must be a positive integer (60-86400 seconds)
JWT_MAX_AGE_SECONDS=3600
JWT_CLOCK_SKEW_SECONDS=60

# =============================================================================
# FEATURE FLAGS (GRANULAR CONTROL)
# =============================================================================

# Enable Prometheus metrics collection
# true: Exposes /metrics endpoint for monitoring
# false: Disables metrics collection for minimal overhead
# Validation: Must be exactly "true" or "false"
ENABLE_METRICS=true

# Enable debug logging output
# true: Includes debug-level logs and request/response details
# false: Standard logging only (recommended for production)
# Validation: Must be exactly "true" or "false"
ENABLE_DEBUG_LOGGING=true

# Enable HTML/CSS/JS minification
# true: Minifies output for production performance
# false: Readable output for development debugging
# Validation: Must be exactly "true" or "false"
MINIFY_ENABLED=true

# Enable HTTP caching headers
# true: Sets cache headers for static assets and responses
# false: Disables caching for development (always fresh content)
# Validation: Must be exactly "true" or "false"
ENABLE_CACHING=false

# Enable database query result caching
# true: Caches database query results for improved performance
# false: Always query database directly (ensures fresh data)
# Validation: Must be exactly "true" or "false"
ENABLE_DATABASE_QUERY_CACHING=false

# Database cache TTL in seconds
# How long to cache database query results before expiring
# Validation: Must be a positive integer (30-3600 seconds)
DATABASE_CACHE_TTL_SECONDS=300

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Enable security headers (CSP, X-Frame-Options, etc.)
# Validation: Must be exactly "true" or "false"
ENABLE_SECURITY_HEADERS=true

# CORS configuration for micro front-end integration
# Validation: Comma-separated list of valid URLs
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

# Rate limiting configuration
# Validation: Must be exactly "true" or "false"
ENABLE_RATE_LIMITING=true
# Validation: Must be a positive integer (1-1000)
RATE_LIMIT_REQUESTS_PER_MINUTE=60

# Request size limits (prevent DoS attacks)
# Validation: Must be a positive integer (1024-10485760 bytes)
MAX_REQUEST_SIZE_BYTES=1048576

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================

# Template caching for improved performance
# Validation: Must be exactly "true" or "false"
ENABLE_TEMPLATE_CACHING=true
TEMPLATE_CACHE_ENABLED=true

# Database query result caching
# Validation: Must be exactly "true" or "false"
ENABLE_DATABASE_QUERY_CACHING=true

# Cache settings
# Validation: Must be a positive integer (30-3600 seconds)
CACHE_TTL_SECONDS=300
# Validation: Must be a positive integer (10-1000 MB)
CACHE_MAX_SIZE_MB=100

# Response compression
# Validation: Must be exactly "true" or "false"
ENABLE_GZIP_COMPRESSION=true
# Validation: Must be 1-9
GZIP_COMPRESSION_LEVEL=6
# Validation: Must be exactly "true" or "false"
ENABLE_BROTLI_COMPRESSION=true

# Metrics naming prefix for multi-app consistency
METRICS_PREFIX=micro_frontend

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Application logging level
# trace: Most verbose, includes all logs
# debug: Debug information for development
# info: General application information
# warn: Warning messages only
# error: Error messages only
# Validation: Must be one of: trace, debug, info, warn, error
LOG_LEVEL=debug

# =============================================================================
# DEVELOPMENT vs PRODUCTION EXAMPLES
# =============================================================================

# Development Mode (recommended defaults above):
# DATABASE_ADAPTER=mock
# MINIFY_ENABLED=false
# ENABLE_DEBUG_LOGGING=true
# ENABLE_CACHING=false
# LOG_LEVEL=debug

# Production Mode:
# DATABASE_ADAPTER=mysql
# MINIFY_ENABLED=true
# ENABLE_DEBUG_LOGGING=false
# ENABLE_CACHING=true
# ENABLE_METRICS=true
# ENABLE_SECURITY_HEADERS=true
# ENABLE_RATE_LIMITING=true
# ENABLE_TEMPLATE_CACHING=true
# ENABLE_DATABASE_QUERY_CACHING=true
# ENABLE_GZIP_COMPRESSION=true
# ENABLE_BROTLI_COMPRESSION=true
# LOG_LEVEL=info

# Testing Mode:
# DATABASE_ADAPTER=mock
# ENABLE_METRICS=false
# ENABLE_DEBUG_LOGGING=false
# ENABLE_SECURITY_HEADERS=false
# ENABLE_RATE_LIMITING=false
# ENABLE_TEMPLATE_CACHING=false
# ENABLE_DATABASE_QUERY_CACHING=false
# LOG_LEVEL=trace

# =============================================================================
# CONFIGURATION PHILOSOPHY
# =============================================================================

# This application uses granular environment variables instead of umbrella
# variables like ENVIRONMENT=prod. This provides:
# - Precise control over individual features
# - Debugging flexibility (enable specific features for troubleshooting)
# - Runtime configuration (same binary can behave differently)
# - Testing isolation (mock specific components while using real implementations)
# 
# All environment variables are validated at application startup according to
# the validation rules listed next to each variable.
